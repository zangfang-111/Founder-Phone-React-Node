import { parsePhoneNumberFromString } from "libphonenumber-js";
import { formatPhoneNumber } from "./phone";
//import toEmoji from "emoji-name-map"
import toEmoji from "../utils/emojiLoader";

export function getPhoneNumbersFromCsvContact(object, prefix) {
  let phoneNumbers = [];
  for (var property in object) {
    if (
      object.hasOwnProperty(property) &&
      property.toString().toLowerCase().includes(prefix)
    ) {
      if (!object[property]) {
        continue;
      }
      let parsedPhoneNumber = parsePhoneNumberFromString(
        formatPhoneNumber(object[property])
      );

      if (parsedPhoneNumber && parsedPhoneNumber.isValid()) {
        phoneNumbers.push(parsedPhoneNumber.number);
      }
    }
  }
  return phoneNumbers;
}

export function getPhoneNumbersFromVCF(object) {
  let phoneNumbers = [];

  let numbers = object.phone;
  numbers.forEach((number) => {
    let parsedPhoneNumber = parsePhoneNumberFromString(
      formatPhoneNumber(number.value)
    );

    if (parsedPhoneNumber && parsedPhoneNumber.isValid()) {
      phoneNumbers.push(parsedPhoneNumber.number);
    }
  });

  return phoneNumbers;
}

export function getEmailAndOrganizationFromVCF(object) {
  let result = {
    email: "",
    org: "",
  };

  // if emails are available
  if (object.email.length > 0) {
    result.email = object.email[0].value;
  }

  // if organization is available
  if (object.org) {
    result.org = object.org;
  }

  return result;
}

export function getOrganizationFromCSV(contact) {
  let organization = "";

  // Google CSV contains Organization 1 - Name
  if (contact.hasOwnProperty("Organization 1 - Name")) {
    organization = contact["Organization 1 - Name"];
  }

  // Outlook CSV contains Organ
  if (contact.hasOwnProperty("Company")) {
    organization = contact["Company"];
  }

  return organization;
}

export function getEmailFromCSV(contact) {
  let email = "";

  // Outlook format contains email in E-mail Address field
  if (contact.hasOwnProperty("E-mail Address")) {
    email = contact["E-mail Address"];
  }

  // Google Format contains E-mail 1 - Value
  if (contact.hasOwnProperty("E-mail 1 - Value")) {
    email = contact["E-mail 1 - Value"];
  }

  return email;
}

export function custom_sort(a, b) {
  return new Date(b.createdOn).getTime() - new Date(a.createdOn).getTime();
}

export function getTextWithEmojisEncoded(message) {
  // parse emojis
  const emojisRegExp = /:[^:\s]*(?:[^:\s]*)*:/g;
  const emojisList = message.match(emojisRegExp);
  if (emojisList && emojisList.length > 0) {
    // if emojis exists
    for (let eachEmoji of emojisList) {
      // get each emoji name and convert them to emoji
      let unicodeEmoji = toEmoji.get(eachEmoji);
      if (!unicodeEmoji) {
        // if not a valid emoji just continue
        continue;
      }

      // This condition is only for :+1: and :-1:
      if (eachEmoji.includes("+") || eachEmoji.includes("-")) {
        eachEmoji = eachEmoji.replace("+", "\\+");
        eachEmoji = eachEmoji.replace("-", "\\-");
      }
      let regex = new RegExp(eachEmoji, "g");
      message = message.replace(regex, unicodeEmoji);
    }
    return message;
  } else {
    // emojis doesn't exist just return the message
    return message;
  }
}

var ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";

var ID_LENGTH = 3;

export function generate() {
  // Written this function because slack is not accepting the uppercase and specialcharacters
  // but those are generated by short id

  var rtn = "";
  for (var i = 0; i < ID_LENGTH; i++) {
    rtn += ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length));
  }
  return rtn;
}
